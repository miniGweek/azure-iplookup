using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using Microsoft.VisualBasic;

namespace azure_iplookup
{
    class Program
    {
        public static async Task Main(string[] args)
        {
            string ip = string.Empty;
            List<string> ips = null;
            string serviceTagJsonFileName = string.Empty;
            string defaultSeriveTagJsonFileName = "ServiceTags_Public_Active.json";
            string ipFlePath = string.Empty;
            if (args != null && args.Length == 1 &&
                "--update".Equals(args[0], StringComparison.InvariantCultureIgnoreCase))
            {
                await DownloadJson.DownloadAndRenameServiceTagsAndIPJsonFile(defaultSeriveTagJsonFileName);
                return;
            }
            else
            {
                if (args == null || args.Length == 0)
                {
                    Console.WriteLine(
                        "Enter IP or the path to the file with list of IPs for searching in Azure IP/ServiceTag Ranges :");
                    ip = Console.ReadLine();
                    ips = ValidateAndLoadIp(ip);

                    Console.WriteLine(
                        "Enter name of the json file ( if not specified ,ServiceTags_Public_Active.json will be used ) :");
                    string userInputJsonFileName = Console.ReadLine();
                    serviceTagJsonFileName = ValidateAndLoadJsonFileName(userInputJsonFileName, defaultSeriveTagJsonFileName);
                }
                else if (args.Length == 1)
                {
                    ip = args[0];
                    ips = ValidateAndLoadIp(ip);
                    serviceTagJsonFileName = defaultSeriveTagJsonFileName;
                }
                else if (args.Length == 2)
                {
                    ip = args[0];
                    ips = ValidateAndLoadIp(ip);
                    serviceTagJsonFileName = ValidateAndLoadJsonFileName(args[1], defaultSeriveTagJsonFileName);
                }

                var azureIpAndServiceTagJson = File.ReadAllText(serviceTagJsonFileName);
                Root azureIPs;
                try
                {
                    azureIPs = JsonSerializer.Deserialize<Root>(azureIpAndServiceTagJson);
                }
                catch
                {
                    azureIPs = LoadCIDRFromCustomInputFile(serviceTagJsonFileName);
                }
                var match = IPHelper.ReturnMatchedIPRange(ips, azureIPs.values);
                Console.WriteLine("------IP--------|----Matched----");
                
                foreach (var m in match.Keys)
                {
                    Console.WriteLine($" {m}\t, {match[m]}");
                }

            }
        }

        private static Root LoadCIDRFromCustomInputFile(string serviceTagJsonFileName)
        {
            Root azureIPs;
            var listOfCIDRsToCheckAgainst = File.ReadAllLines(serviceTagJsonFileName).ToList();
            var cidrStore = new Dictionary<string, List<string>>();
            string defaultName = "Default_Autogenerated";
            foreach (var item in listOfCIDRsToCheckAgainst)
            {
                var itemArray = item.Split(",");
                var cidr = itemArray[0].Trim();
                var name = itemArray.Length == 2 ? string.IsNullOrWhiteSpace(itemArray[1].Trim()) ? defaultName: itemArray[1].Trim() : defaultName;

                if (cidrStore.ContainsKey(name))
                {
                    cidrStore[name].Add(cidr);
                }
                else
                {
                    cidrStore.Add(name, new List<string>() {cidr});
                }
            }

            azureIPs = new Root();
            azureIPs.values = new List<Value>();
            foreach (var key in cidrStore.Keys)
            {
                azureIPs.values.Add(new Value()
                {
                    name = key,
                    properties = new Properties()
                    {
                        addressPrefixes = cidrStore[key]
                    }
                });
            }

            return azureIPs;
        }

        internal static string ValidateAndLoadJsonFileName(string userInputJsonFileName, string defaultSeriveTagJsonFileName)
        {
            string serviceTagJsonFileName = string.Empty;
            if (!string.IsNullOrWhiteSpace(userInputJsonFileName))
            {
                serviceTagJsonFileName = userInputJsonFileName;
            }
            else
            {
                serviceTagJsonFileName = defaultSeriveTagJsonFileName;
            }

            return serviceTagJsonFileName;
        }

        internal static List<string> ValidateAndLoadIp(string ip)
        {
            List<string> ips = null;
            if (IPHelper.IsValidIP(ip))
            {
                ips = new List<string>() { ip };
            }

            if (!IPHelper.IsValidIP(ip) && File.Exists(ip))
            {
                ips = File.ReadAllLines(ip).ToList();
            }
            else if (!IPHelper.IsValidIP(ip) && !File.Exists(ip))
            {
                Console.WriteLine("Invalid IP/File doesn't exist. Stopping.");
                return ips;
            }

            return ips;
        }
    }
}
